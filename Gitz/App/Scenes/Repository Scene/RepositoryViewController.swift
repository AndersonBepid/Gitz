//
//  RepositoryViewController.swift
//  Gitz
//
//  Created by Anderson Oliveira on 28/10/18.
//  Copyright (c) 2018 Anderson Oliveira. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol RepositoryViewControllerInput {
    func displaySearchResult(viewModel: RepositoryScene.SearchRepository.ViewModel)
}

protocol RepositoryViewControllerOutput {
    func searchRepository(request: RepositoryScene.SearchRepository.Request)
    func selectRepository(request: RepositoryScene.SelectRepository.Request)
}

class RepositoryViewController: UIViewController, RepositoryViewControllerInput {

    // MARK: IBOutlets

    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var loadingActivityIndicator: UIActivityIndicatorView!

    // MARK: Properties

    static let cellIdentifier = "\(RepositoryCollectionViewCell.self)"
    static let notificationName = Notification.Name("\(RepositoryViewController.self)")
    var output: RepositoryViewControllerOutput?
    var router: RepositoryRouter?
    var repositories: [Repository] = []
    var searchTerm = "a"
    var page = 1
    var isGetRepository = false
    var hasMorePages = false

    // MARK: Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        RepositoryConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupStyle()
        registerCells()
        initialSearch()
        NotificationCenter.default.addObserver(self, selector: #selector(searchRepositoriesObservable(_:)), name: RepositoryViewController.notificationName, object: nil)
    }

    deinit {
        NotificationCenter.default.removeObserver(self, name: RepositoryViewController.notificationName, object: nil)
    }
    
    // MARK: Requests

    private func initialSearch() {
        searchRepositories(searchTerm)
    }

    private func searchRepositories(_ searchTerm: String) {
        let request = RepositoryScene.SearchRepository.Request(searchTerm: searchTerm, page: page)
        loadingActivityIndicator.startAnimating()
        clearList()
        self.searchTerm = searchTerm
        isGetRepository = true
        output?.searchRepository(request: request)
    }

    @objc private func searchRepositoriesObservable(_ sender: Notification) {
        guard let searchTerm = sender.object as? String else { return }
        page = 1
        searchRepositories(searchTerm)
    }

    // MARK: Display logic

    func displaySearchResult(viewModel: RepositoryScene.SearchRepository.ViewModel) {
        switch viewModel.state {
        case .success(let searchResultRepository):
            // TO DO: Remove Force
            hasMorePages = searchResultRepository.amount! > (page * 30)
            DispatchQueue.main.async {
                for (index, repository) in searchResultRepository.repositories.enumerated() {
                    self.repositories.append(repository)
                    let indexItem = (index + ((self.page - 1) * 30))
                    let indexPath = IndexPath(item: indexItem, section: 0)
                    self.collectionView.insertItems(at: [indexPath])
                }
                self.has(repositories: self.repositories)
            }
        case .failure:
            alert(title: "Ops", message: "Houston, we have a problem...")
            has(repositories: repositories)
        }
        DispatchQueue.main.async {
            self.loadingActivityIndicator.stopAnimating()
        }
    }
}

// MARK: Setup Style

extension RepositoryViewController {

    private func setupStyle() {
        collectionView.backgroundColor = .clear
    }
}

extension RepositoryViewController {

    private func alert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Ok", style: .cancel, handler: nil)
        alert.addAction(okAction)

        present(alert, animated: true, completion: nil)
    }

    private func clearList() {
        if page == 1 {
            repositories = []
            collectionView.reloadData()
        }
    }

    private func has(repositories: [Repository]) {
        isGetRepository = false
        if repositories.isEmpty {
            DispatchQueue.main.async {
                self.collectionView.setEmptyMessage("No results found.")
                self.collectionView.reloadData()
            }
        } else {
            collectionView.restore()
        }
    }

    private func registerCells() {
        let cellNib = UINib(nibName: "RepositoryCell", bundle: nil)
        collectionView.register(cellNib, forCellWithReuseIdentifier: RepositoryViewController.cellIdentifier)
    }
}

// MARK: Scroll Delegate

extension RepositoryViewController: UIScrollViewDelegate {

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if hasMorePages && !isGetRepository {
            let indexes = collectionView.indexPathsForVisibleItems.map { $0.item }
            let lastButThree = repositories.endIndex - 3
            if indexes.contains(lastButThree) { getMoreRepositories() }
        }
    }

    func getMoreRepositories() {
        page += 1
        searchRepositories(searchTerm)
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension RepositoryViewController: RepositoryPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}
